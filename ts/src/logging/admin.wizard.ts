import { Scenes, Telegraf, Markup } from 'telegraf';
import { TelegrafContext } from './types';
import { WizardScene } from 'telegraf/typings/scenes';
import { sendMessage } from './messages.service';

export function initAdminWizard(
  bot: Telegraf<TelegrafContext>,
  chat: string,
): WizardScene<TelegrafContext> {
  return new Scenes.WizardScene<TelegrafContext>(
    'admin_wizard',
    async (ctx) => {
      const chatId = ctx.chat?.id;
      const userName = ctx.from?.first_name || ctx.from?.username;
      const userTag = ctx.from?.username;
      ctx.scene.session.form = {
        chatId,
        userName,
        userTag,
      };

      ctx
        .replyWithMarkdown(
          '–©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞.',
          Markup.inlineKeyboard([
            Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É', 'cancel'),
          ]),
        )
        .then(() => {
          ctx.reply('–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏—Å–≤—è—á—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª—É –Ω–∞ –¥–µ–Ω—å?');
        });

      return ctx.wizard.next();
    },
    async (ctx) => {
      if (ctx.message && 'text' in ctx.message) {
        ctx.scene.session.form.time = ctx.message.text;
        ctx.reply('–î—è–∫—É—é! –ü—ñ–¥–∫–∞–∂—ñ—Ç—å, —â–æ –≤–∏ –≤–º—ñ—î—Ç–µ?');
        return ctx.wizard.next();
      } else {
        ctx.reply('–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ª–æ–≤–∞–º–∏. –î—è–∫—É—é!');
      }
    },
    async (ctx) => {
      if (ctx.message && 'text' in ctx.message) {
        ctx.scene.session.form.knowledge = ctx.message.text;
        ctx.reply(
          '–ó—Ä–æ–∑—É–º—ñ–ª–æ! –ê —á–∏–º –±–∏ —Ö–æ—Ç—ñ–ª–∏ –∑–∞–π–º–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ñ? (–ª–æ—Ä, —Ü—ñ–∫–∞–≤–∏–Ω–∫–∏, “ë–∞–π–¥–∏, —Ç–æ—â–æ)',
        );
        return ctx.wizard.next();
      } else {
        ctx.reply('–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ª–æ–≤–∞–º–∏. –î—è–∫—É—é!');
      }
    },
    async (ctx) => {
      if (ctx.message && 'text' in ctx.message) {
        ctx.scene.session.form.topics = ctx.message.text;
        ctx.reply('–û–≥–æ, —Ü—ñ–∫–∞–≤–æ! –î—è–∫—É—é!').then(() => {
          ctx.reply(
            'üéâ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ó –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤ º—è–∂—É—Ç—å—Å—è. \n‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, —â–æ –±—É–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞: \n' +
              info,
          );
        });

        const info =
          '–¢–µ–≥: @' +
          ctx.scene.session.form.userTag +
          '\n' +
          '–ß–∞—Å –Ω–∞ –¥–µ–Ω—å: ' +
          ctx.scene.session.form.time +
          '\n' +
          '–í–º—ñ–Ω–Ω—è: ' +
          ctx.scene.session.form.knowledge +
          '\n' +
          '–¢–µ–º–∏: ' +
          ctx.scene.session.form.topics;

        sendMessage(
          bot,
          chat,
          '‚õë –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω–∫–∏ –≤—ñ–¥: ' +
            ctx.scene.session.form.userName + '\n' + info,
        );

        return ctx.scene.leave();
      } else {
        ctx.reply('–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ª–æ–≤–∞–º–∏. –î—è–∫—É—é!');
      }
    },
  );
}
